name: UniFFI Bindings CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build and test the Rust library
  build-rust:
    name: Build Rust Library
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build library with UniFFI
        run: cargo build --release --features uniffi-bindings --lib
      
      - name: Run tests
        run: cargo test --features uniffi-bindings
      
      - name: Upload library artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-library-${{ matrix.os }}
          path: |
            target/release/libmermaid_it.*
            target/release/mermaid_it.dll

  # Generate UniFFI bindings
  generate-bindings:
    name: Generate Language Bindings
    needs: build-rust
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-ubuntu-latest
          path: target/release
      
      - name: Generate Python bindings
        run: cargo run --bin uniffi-bindgen --features uniffi-bindings -- python
      
      - name: Generate Ruby bindings
        run: cargo run --bin uniffi-bindgen --features uniffi-bindings -- ruby
      
      - name: Generate Kotlin bindings
        run: cargo run --bin uniffi-bindgen --features uniffi-bindings -- kotlin
      
      - name: Generate Swift bindings
        run: cargo run --bin uniffi-bindgen --features uniffi-bindings -- swift
      
      - name: Upload bindings artifacts
        uses: actions/upload-artifact@v3
        with:
          name: generated-bindings
          path: |
            bindings/python/
            bindings/ruby/
            bindings/kotlin/
            bindings/swift/

  # Test Python bindings
  test-python:
    name: Test Python Bindings
    needs: generate-bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: generated-bindings
          path: bindings
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-${{ matrix.os }}
          path: target/release
      
      - name: Install Python package
        run: |
          cd packaging/python
          pip install -e .
      
      - name: Run Python example
        run: |
          cd examples/python
          python example.py
      
      - name: Run Python tests
        run: |
          pip install pytest
          cd bindings/python
          pytest tests/ || echo "No tests yet"

  # Test Ruby bindings
  test-ruby:
    name: Test Ruby Bindings
    needs: generate-bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        ruby: ["2.7", "3.0", "3.1", "3.2"]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
      
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: generated-bindings
          path: bindings
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-${{ matrix.os }}
          path: target/release
      
      - name: Copy library to Ruby bindings
        run: |
          mkdir -p bindings/ruby/lib
          cp target/release/libmermaid_it.* bindings/ruby/lib/ || true
          cp target/release/mermaid_it.dll bindings/ruby/lib/ || true
      
      - name: Run Ruby example
        run: |
          cd examples/ruby
          ruby example.rb

  # Test Go bindings
  test-go:
    name: Test Go Bindings
    needs: build-rust
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ["1.19", "1.20", "1.21"]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-${{ matrix.os }}
          path: target/release
      
      - name: Build and test Go bindings
        run: |
          cd bindings/go
          go build .
          go test -v ./...
      
      - name: Run Go example
        run: |
          cd examples/go
          go run example.go

  # Test Kotlin/Java bindings
  test-kotlin:
    name: Test Kotlin Bindings
    needs: generate-bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: ["11", "17"]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
      
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: generated-bindings
          path: bindings
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-${{ matrix.os }}
          path: target/release
      
      - name: Build Kotlin bindings
        run: |
          cd bindings/kotlin
          # Create basic build.gradle.kts if not exists
          if [ ! -f build.gradle.kts ]; then
            echo 'plugins { kotlin("jvm") version "1.9.0" }' > build.gradle.kts
            echo 'repositories { mavenCentral() }' >> build.gradle.kts
          fi
          # Build would go here
          echo "Kotlin build placeholder"

  # Test Swift bindings (macOS only)
  test-swift:
    name: Test Swift Bindings
    needs: generate-bindings
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download bindings
        uses: actions/download-artifact@v3
        with:
          name: generated-bindings
          path: bindings
      
      - name: Download Rust library
        uses: actions/download-artifact@v3
        with:
          name: rust-library-macos-latest
          path: target/release
      
      - name: Build Swift bindings
        run: |
          cd bindings/swift
          # Create Package.swift if not exists
          if [ ! -f Package.swift ]; then
            swift package init --type library --name MermaidIt
          fi
          swift build

  # Build and test WASM bindings
  test-wasm:
    name: Test WASM Bindings
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM bindings
        run: |
          cd bindings/wasm
          wasm-pack build --target web --out-dir pkg
          wasm-pack build --target nodejs --out-dir pkg-node
      
      - name: Test WASM bindings
        run: |
          cd bindings/wasm
          wasm-pack test --node

  # Release job - only runs on tags
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test-python, test-ruby, test-go, test-kotlin, test-swift, test-wasm]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            rust-library-*/*
            generated-bindings/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Python package to PyPI
  publish-python:
    name: Publish Python Package
    if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Build and publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install build twine
          cd packaging/python
          python -m build
          twine upload dist/*

  # Publish Ruby gem
  publish-ruby:
    name: Publish Ruby Gem
    if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Build and publish gem
        env:
          GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          cd packaging/ruby
          gem build mermaid_it.gemspec
          gem push mermaid-it-*.gem

  # Publish WASM to npm
  publish-wasm:
    name: Publish WASM Package
    if: startsWith(github.ref, 'refs/tags/')
    needs: release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build and publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd bindings/wasm
          wasm-pack build --target web --out-dir pkg
          wasm-pack publish