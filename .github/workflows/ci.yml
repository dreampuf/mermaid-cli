name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --all-features

  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build CLI
        run: cargo build --release --features cli
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mermaid-it-${{ matrix.os }}
          path: target/release/mermaid-it*

  build-python:
    name: Build Python Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Build Python package
        working-directory: bindings/python
        run: maturin build --release
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.python }}
          path: bindings/python/target/wheels/*.whl

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM package
        working-directory: bindings/wasm
        run: |
          wasm-pack build --target web --out-dir pkg
          wasm-pack build --target nodejs --out-dir pkg-node
          wasm-pack build --target bundler --out-dir pkg-bundler
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-packages
          path: |
            bindings/wasm/pkg
            bindings/wasm/pkg-node
            bindings/wasm/pkg-bundler

  build-nodejs:
    name: Build Node.js Bindings
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [14, 16, 18, 20]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install dependencies
        working-directory: bindings/nodejs
        run: npm install
      
      - name: Build Node.js package
        working-directory: bindings/nodejs
        run: npm run build
      
      - name: Upload Node.js artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-${{ matrix.os }}-node${{ matrix.node }}
          path: bindings/nodejs/*.node

  publish-python:
    name: Publish Python Package
    needs: [test, build-python]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install maturin
        run: pip install maturin
      
      - name: Publish to PyPI
        working-directory: bindings/python
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: maturin publish

  publish-npm:
    name: Publish NPM Packages
    needs: [test, build-nodejs, build-wasm]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build and publish WASM package
        working-directory: bindings/wasm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          wasm-pack build --target web --out-dir pkg
          wasm-pack publish
      
      - name: Build and publish Node.js package
        working-directory: bindings/nodejs
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm install
          npm run build
          npm publish